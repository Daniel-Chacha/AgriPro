# Generated by Django 5.1.1 on 2024-09-24 08:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FARMING_TIPS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CROP_CARE', models.URLField()),
                ('TECHNIQUES', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='PEST_DISEASE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PEST_NAME', models.TextField(verbose_name=20)),
                ('DEFINITION', models.TextField(max_length=200)),
                ('VIDE0_URL', models.URLField()),
                ('TREATMENT', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='SOIL_HEALTH',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CROP_NAME', models.TextField(max_length=20)),
                ('SOIL_TYPE', models.TextField(max_length=20)),
                ('SUGGESTION', models.CharField(max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='USERS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('PHONENUMBER', models.CharField(max_length=15)),
                ('COUNTRY', models.CharField(max_length=100)),
                ('TOWN', models.CharField(max_length=100)),
                ('DOB', models.DateField()),
                ('GENDER', models.CharField(max_length=10)),
                ('LINKEDIN', models.URLField(blank=True, null=True)),
                ('X', models.URLField(blank=True, null=True)),
                ('INSTAGRAM', models.URLField(blank=True, null=True)),
                ('TIKTOK', models.URLField(blank=True, null=True)),
                ('FACEBOOK', models.URLField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BUDGET',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BUDGET_CATEGORY', models.TextField(max_length=20)),
                ('BUDGET_AMOUNT', models.FloatField(max_length=20)),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CARBON_CALC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FUEL_USED', models.IntegerField()),
                ('ELECTRICITY_USED', models.FloatField(max_length=10)),
                ('FERTILIZER_USED', models.FloatField(max_length=10)),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DASHBOARD',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CULTIVATED_LAND', models.CharField(max_length=50)),
                ('CROP_TYPES', models.TextField()),
                ('LIVESTOCK_STATUS', models.CharField(max_length=200)),
                ('LABOUR_TYPE', models.TextField(max_length=50)),
                ('NO_WORKERS', models.IntegerField()),
                ('RECENT_ACTIVITIES', models.TextField()),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EXPENSE_TRACKING',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('EXPENSE_TYPE', models.TextField(max_length=20)),
                ('AMOUNT', models.FloatField(max_length=20)),
                ('DATE', models.DateField()),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='INCOME_TRACKING',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODUCT_NAME', models.TextField(max_length=20)),
                ('QUANTITY', models.FloatField(max_length=20)),
                ('AMOUNT', models.FloatField(max_length=20)),
                ('DATE', models.DateField()),
                ('BUYER_NAME', models.CharField(max_length=20)),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LIVESTOCK_BREEDING',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ANIMAL_ID', models.CharField(max_length=20)),
                ('LAST_BREEDING', models.DateField()),
                ('EXPECTED_BIRTH', models.DateField()),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LIVESTOCK_FEEDING',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ANIMAL_CATEGORY', models.TextField(max_length=20)),
                ('FEED_AMOUNT', models.CharField(max_length=20)),
                ('FEEDING_TIME', models.TimeField()),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LIVESTOCK_HEALTH',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ANIMAL_ID', models.CharField(max_length=20)),
                ('VACCINATION_DATE', models.DateField()),
                ('ILLNESS_HISTORY', models.CharField(max_length=400)),
                ('TREATMENT_HISTORY', models.CharField(max_length=400)),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SUSTAINABLE_PRACTICE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRACTICE', models.TextField(max_length=20)),
                ('AREA_COVERED', models.CharField(max_length=20)),
                ('DESCRIPTION', models.CharField(max_length=400)),
                ('USER_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
